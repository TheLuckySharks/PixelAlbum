{"ast":null,"code":"var _jsxFileName = \"/Users/am/Downloads/sluchajfun-main 2/src/components/Search/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { event } from \"react-ga\";\nimport { IoSearch } from \"react-icons/io5\";\nimport { searchSong } from \"../../helpers\";\nimport * as Styled from \"./index.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Search(_ref) {\n  _s();\n\n  let {\n    currentTry,\n    setSelectedSong\n  } = _ref;\n  const [value, setValue] = React.useState(\"\");\n  const [results, setResults] = React.useState([]);\n  React.useEffect(() => {\n    if (value) {\n      setResults(searchSong(value));\n    } else if (value === \"\") {\n      setResults([]);\n    }\n  }, [value]); // clear value on selection\n\n  React.useEffect(() => {\n    setValue(\"\");\n  }, [currentTry]);\n  return /*#__PURE__*/_jsxDEV(Styled.Container, {\n    children: [/*#__PURE__*/_jsxDEV(Styled.ResultsContainer, {\n      children: results.map(song => /*#__PURE__*/_jsxDEV(Styled.Result, {\n        onClick: () => {\n          setSelectedSong(song);\n          setValue(`${song.artist} - ${song.name}`);\n          setResults([]);\n          event({\n            category: \"Player\",\n            action: \"Chose song\",\n            label: `${song.artist} - ${song.name}`\n          });\n        },\n        children: /*#__PURE__*/_jsxDEV(Styled.ResultText, {\n          children: [song.artist, \" - \", song.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)\n      }, song.youtubeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Styled.SearchContainer, {\n      children: /*#__PURE__*/_jsxDEV(Styled.SearchPadding, {\n        children: [/*#__PURE__*/_jsxDEV(IoSearch, {\n          size: 20\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Styled.Input, {\n          onChange: e => setValue(e.currentTarget.value),\n          placeholder: \"Know it? Search for the artist/title\",\n          value: value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Search, \"q6o7ocNf+vciIxeowzJNwFTFyEQ=\");\n\n_c = Search;\n\nvar _c;\n\n$RefreshReg$(_c, \"Search\");","map":{"version":3,"sources":["/Users/am/Downloads/sluchajfun-main 2/src/components/Search/index.tsx"],"names":["React","event","IoSearch","searchSong","Styled","Search","currentTry","setSelectedSong","value","setValue","useState","results","setResults","useEffect","map","song","artist","name","category","action","label","youtubeId","e","currentTarget"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,UAAtB;AACA,SAASC,QAAT,QAAyB,iBAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AAGA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;;AAOA,OAAO,SAASC,MAAT,OAAwD;AAAA;;AAAA,MAAxC;AAAEC,IAAAA,UAAF;AAAcC,IAAAA;AAAd,GAAwC;AAC7D,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBT,KAAK,CAACU,QAAN,CAAuB,EAAvB,CAA1B;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBZ,KAAK,CAACU,QAAN,CAAuB,EAAvB,CAA9B;AAEAV,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpB,QAAIL,KAAJ,EAAW;AACTI,MAAAA,UAAU,CAACT,UAAU,CAACK,KAAD,CAAX,CAAV;AACD,KAFD,MAEO,IAAIA,KAAK,KAAK,EAAd,EAAkB;AACvBI,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;AACF,GAND,EAMG,CAACJ,KAAD,CANH,EAJ6D,CAY7D;;AACAR,EAAAA,KAAK,CAACa,SAAN,CAAgB,MAAM;AACpBJ,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GAFD,EAEG,CAACH,UAAD,CAFH;AAIA,sBACE,QAAC,MAAD,CAAQ,SAAR;AAAA,4BACE,QAAC,MAAD,CAAQ,gBAAR;AAAA,gBACGK,OAAO,CAACG,GAAR,CAAaC,IAAD,iBACX,QAAC,MAAD,CAAQ,MAAR;AAEE,QAAA,OAAO,EAAE,MAAM;AACbR,UAAAA,eAAe,CAACQ,IAAD,CAAf;AACAN,UAAAA,QAAQ,CAAE,GAAEM,IAAI,CAACC,MAAO,MAAKD,IAAI,CAACE,IAAK,EAA/B,CAAR;AACAL,UAAAA,UAAU,CAAC,EAAD,CAAV;AAEAX,UAAAA,KAAK,CAAC;AACJiB,YAAAA,QAAQ,EAAE,QADN;AAEJC,YAAAA,MAAM,EAAE,YAFJ;AAGJC,YAAAA,KAAK,EAAG,GAAEL,IAAI,CAACC,MAAO,MAAKD,IAAI,CAACE,IAAK;AAHjC,WAAD,CAAL;AAKD,SAZH;AAAA,+BAcE,QAAC,MAAD,CAAQ,UAAR;AAAA,qBACGF,IAAI,CAACC,MADR,SACmBD,IAAI,CAACE,IADxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAdF,SACOF,IAAI,CAACM,SADZ;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,eAuBE,QAAC,MAAD,CAAQ,eAAR;AAAA,6BACE,QAAC,MAAD,CAAQ,aAAR;AAAA,gCACE,QAAC,QAAD;AAAU,UAAA,IAAI,EAAE;AAAhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,MAAD,CAAQ,KAAR;AACE,UAAA,QAAQ,EAAGC,CAAD,IAAOb,QAAQ,CAACa,CAAC,CAACC,aAAF,CAAgBf,KAAjB,CAD3B;AAEE,UAAA,WAAW,EAAC,sCAFd;AAGE,UAAA,KAAK,EAAEA;AAHT;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAvBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoCD;;GArDeH,M;;KAAAA,M","sourcesContent":["import React from \"react\";\nimport { event } from \"react-ga\";\nimport { IoSearch } from \"react-icons/io5\";\nimport { searchSong } from \"../../helpers\";\nimport { Song } from \"../../types/song\";\n\nimport * as Styled from \"./index.styled\";\n\ninterface Props {\n  currentTry: number;\n  setSelectedSong: React.Dispatch<React.SetStateAction<Song | undefined>>;\n}\n\nexport function Search({ currentTry, setSelectedSong }: Props) {\n  const [value, setValue] = React.useState<string>(\"\");\n  const [results, setResults] = React.useState<Song[]>([]);\n\n  React.useEffect(() => {\n    if (value) {\n      setResults(searchSong(value));\n    } else if (value === \"\") {\n      setResults([]);\n    }\n  }, [value]);\n\n  // clear value on selection\n  React.useEffect(() => {\n    setValue(\"\");\n  }, [currentTry]);\n\n  return (\n    <Styled.Container>\n      <Styled.ResultsContainer>\n        {results.map((song) => (\n          <Styled.Result\n            key={song.youtubeId}\n            onClick={() => {\n              setSelectedSong(song);\n              setValue(`${song.artist} - ${song.name}`);\n              setResults([]);\n\n              event({\n                category: \"Player\",\n                action: \"Chose song\",\n                label: `${song.artist} - ${song.name}`,\n              });\n            }}\n          >\n            <Styled.ResultText>\n              {song.artist} - {song.name}\n            </Styled.ResultText>\n          </Styled.Result>\n        ))}\n      </Styled.ResultsContainer>\n      <Styled.SearchContainer>\n        <Styled.SearchPadding>\n          <IoSearch size={20} />\n          <Styled.Input\n            onChange={(e) => setValue(e.currentTarget.value)}\n            placeholder=\"Know it? Search for the artist/title\"\n            value={value}\n          />\n        </Styled.SearchPadding>\n      </Styled.SearchContainer>\n    </Styled.Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}