{"ast":null,"code":"var _jsxFileName = \"/Users/am/Desktop/sluchajfun-main 2 2/RockNew/src/app.tsx\",\n    _s = $RefreshSig$();\n\nimport { event } from \"react-ga\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { todaysSolution } from \"./helpers\";\nimport { Header, InfoPopUp, Game, Footer } from \"./components\";\nimport * as Styled from \"./app.styled\";\nimport ContactPage from \"./ContactPage\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const initialGuess = {\n    song: undefined,\n    skipped: false,\n    isCorrect: undefined\n  };\n  const [guesses, setGuesses] = React.useState(Array.from({\n    length: 5\n  }).fill(initialGuess));\n  const [currentTry, setCurrentTry] = React.useState(0);\n  const [selectedSong, setSelectedSong] = React.useState();\n  const [didGuess, setDidGuess] = React.useState(false);\n  const firstRun = localStorage.getItem(\"firstRun\") === null;\n  let stats = JSON.parse(localStorage.getItem(\"stats\") || \"{}\");\n  const [gamesPlayed, setGamesPlayed] = React.useState(0);\n  const [totalGuesses, setTotalGuesses] = React.useState(0);\n  React.useEffect(() => {\n    if (Array.isArray(stats)) {\n      const visitedToday = _.isEqual(todaysSolution, stats[stats.length - 1].solution);\n\n      if (!visitedToday) {\n        stats.push({\n          solution: todaysSolution,\n          currentTry: 0,\n          didGuess: 0\n        });\n      } else {\n        const {\n          currentTry,\n          guesses,\n          didGuess\n        } = stats[stats.length - 1];\n        setCurrentTry(currentTry);\n        setGuesses(guesses);\n        setDidGuess(didGuess);\n      }\n    } else {\n      // initialize stats\n      // useEffect below does rest\n      stats = [];\n      stats.push({\n        solution: todaysSolution\n      });\n    }\n\n    if (Array.isArray(stats)) {\n      setGamesPlayed(stats.length);\n      setTotalGuesses(stats.reduce((total, stat) => total + stat.guesses.length, 0));\n    }\n  }, []);\n  React.useEffect(() => {\n    if (Array.isArray(stats)) {\n      stats[stats.length - 1].currentTry = currentTry;\n      stats[stats.length - 1].didGuess = didGuess;\n      stats[stats.length - 1].guesses = guesses;\n    }\n  }, [guesses, currentTry, didGuess]);\n  React.useEffect(() => {\n    localStorage.setItem(\"stats\", JSON.stringify(stats));\n  }, [stats]);\n  const [isInfoPopUpOpen, setIsInfoPopUpOpen] = React.useState(firstRun);\n  const openInfoPopUp = React.useCallback(() => {\n    setIsInfoPopUpOpen(true);\n  }, []);\n  const closeInfoPopUp = React.useCallback(() => {\n    if (firstRun) {\n      localStorage.setItem(\"firstRun\", \"false\");\n      setIsInfoPopUpOpen(false);\n    } else {\n      setIsInfoPopUpOpen(false);\n    }\n  }, [localStorage.getItem(\"firstRun\")]);\n  const skip = React.useCallback(() => {\n    setGuesses(guesses => {\n      const newGuesses = [...guesses];\n      newGuesses[currentTry] = {\n        song: undefined,\n        skipped: true,\n        isCorrect: undefined\n      };\n      return newGuesses;\n    });\n    setCurrentTry(currentTry => currentTry + 1);\n    event({\n      category: \"Game\",\n      action: \"Skip\"\n    });\n  }, [currentTry]);\n  const guess = React.useCallback(() => {\n    const isCorrect = selectedSong === todaysSolution;\n\n    if (!selectedSong) {\n      alert(\"Choose a song\");\n      return;\n    }\n\n    setGuesses(guesses => {\n      const newGuesses = [...guesses];\n      newGuesses[currentTry] = {\n        song: selectedSong,\n        skipped: false,\n        isCorrect: isCorrect\n      };\n      return newGuesses;\n    });\n    setCurrentTry(currentTry => currentTry + 1);\n    setSelectedSong(undefined);\n\n    if (isCorrect) {\n      setDidGuess(true); // Update the score in local storage\n\n      const userScore = JSON.parse(localStorage.getItem(\"userScore\") || \"[]\");\n      userScore.push({\n        solution: todaysSolution,\n        guesses: currentTry + 1\n      });\n      localStorage.setItem(\"userScore\", JSON.stringify(userScore));\n    }\n\n    event({\n      category: \"Game\",\n      action: \"Guess\",\n      label: `${selectedSong.artist} - ${selectedSong.name}`,\n      value: isCorrect ? 1 : 0\n    });\n  }, [guesses, selectedSong]);\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      openInfoPopUp: openInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), isInfoPopUpOpen && /*#__PURE__*/_jsxDEV(InfoPopUp, {\n      onClose: closeInfoPopUp\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(Styled.Container, {\n      children: [/*#__PURE__*/_jsxDEV(Styled.GameStats, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Games Played: \", gamesPlayed]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Guesses: \", totalGuesses]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(Routes, {\n          children: [/*#__PURE__*/_jsxDEV(Route, {\n            path: \"/\",\n            element: /*#__PURE__*/_jsxDEV(Game, {\n              guesses: guesses,\n              didGuess: didGuess,\n              todaysSolution: todaysSolution,\n              currentTry: currentTry,\n              setSelectedSong: setSelectedSong,\n              skip: skip,\n              guess: guess\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Route, {\n            path: \"/contact\",\n            element: /*#__PURE__*/_jsxDEV(ContactPage, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 45\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 158,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"F96EBIMo5PYWQjlC6Z5/7nQJ9jA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/am/Desktop/sluchajfun-main 2 2/RockNew/src/app.tsx"],"names":["event","React","_","BrowserRouter","Router","Routes","Route","todaysSolution","Header","InfoPopUp","Game","Footer","Styled","ContactPage","App","initialGuess","song","undefined","skipped","isCorrect","guesses","setGuesses","useState","Array","from","length","fill","currentTry","setCurrentTry","selectedSong","setSelectedSong","didGuess","setDidGuess","firstRun","localStorage","getItem","stats","JSON","parse","gamesPlayed","setGamesPlayed","totalGuesses","setTotalGuesses","useEffect","isArray","visitedToday","isEqual","solution","push","reduce","total","stat","setItem","stringify","isInfoPopUpOpen","setIsInfoPopUpOpen","openInfoPopUp","useCallback","closeInfoPopUp","skip","newGuesses","category","action","guess","alert","userScore","label","artist","name","value"],"mappings":"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","sourcesContent":["import { event } from \"react-ga\";\nimport React from \"react\";\nimport _ from \"lodash\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Song } from \"./types/song\";\nimport { GuessType } from \"./types/guess\";\nimport { todaysSolution } from \"./helpers\";\nimport { Header, InfoPopUp, Game, Footer } from \"./components\";\nimport * as Styled from \"./app.styled\";\nimport ContactPage from \"./ContactPage\";\n\nfunction App() {\n  const initialGuess = {\n    song: undefined,\n    skipped: false,\n    isCorrect: undefined,\n  } as GuessType;\n\n  const [guesses, setGuesses] = React.useState<GuessType[]>(\n    Array.from({ length: 5 }).fill(initialGuess) as GuessType[]\n  );\n  const [currentTry, setCurrentTry] = React.useState<number>(0);\n  const [selectedSong, setSelectedSong] = React.useState<Song>();\n  const [didGuess, setDidGuess] = React.useState<boolean>(false);\n\n  const firstRun = localStorage.getItem(\"firstRun\") === null;\n  let stats = JSON.parse(localStorage.getItem(\"stats\") || \"{}\");\n\n  const [gamesPlayed, setGamesPlayed] = React.useState(0);\n  const [totalGuesses, setTotalGuesses] = React.useState(0);\n\n  React.useEffect(() => {\n    if (Array.isArray(stats)) {\n      const visitedToday = _.isEqual(\n        todaysSolution,\n        stats[stats.length - 1].solution\n      );\n\n      if (!visitedToday) {\n        stats.push({\n          solution: todaysSolution,\n          currentTry: 0,\n          didGuess: 0,\n        });\n      } else {\n        const { currentTry, guesses, didGuess } = stats[stats.length - 1];\n        setCurrentTry(currentTry);\n        setGuesses(guesses);\n        setDidGuess(didGuess);\n      }\n    } else {\n      // initialize stats\n      // useEffect below does rest\n      stats = [];\n      stats.push({\n        solution: todaysSolution,\n      });\n    }\n\n    if (Array.isArray(stats)) {\n      setGamesPlayed(stats.length);\n      setTotalGuesses(\n        stats.reduce((total, stat) => total + stat.guesses.length, 0)\n      );\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (Array.isArray(stats)) {\n      stats[stats.length - 1].currentTry = currentTry;\n      stats[stats.length - 1].didGuess = didGuess;\n      stats[stats.length - 1].guesses = guesses;\n    }\n  }, [guesses, currentTry, didGuess]);\n\n  React.useEffect(() => {\n    localStorage.setItem(\"stats\", JSON.stringify(stats));\n  }, [stats]);\n\n  const [isInfoPopUpOpen, setIsInfoPopUpOpen] =\n    React.useState<boolean>(firstRun);\n\n  const openInfoPopUp = React.useCallback(() => {\n    setIsInfoPopUpOpen(true);\n  }, []);\n\n  const closeInfoPopUp = React.useCallback(() => {\n    if (firstRun) {\n      localStorage.setItem(\"firstRun\", \"false\");\n      setIsInfoPopUpOpen(false);\n    } else {\n      setIsInfoPopUpOpen(false);\n    }\n  }, [localStorage.getItem(\"firstRun\")]);\n\n  const skip = React.useCallback(() => {\n    setGuesses((guesses: GuessType[]) => {\n      const newGuesses = [...guesses];\n      newGuesses[currentTry] = {\n        song: undefined,\n        skipped: true,\n        isCorrect: undefined,\n      };\n\n      return newGuesses;\n    });\n\n    setCurrentTry((currentTry) => currentTry + 1);\n\n    event({\n      category: \"Game\",\n      action: \"Skip\",\n    });\n  }, [currentTry]);\n\n  const guess = React.useCallback(() => {\n    const isCorrect = selectedSong === todaysSolution;\n\n    if (!selectedSong) {\n      alert(\"Choose a song\");\n      return;\n    }\n\n    setGuesses((guesses: GuessType[]) => {\n      const newGuesses = [...guesses];\n      newGuesses[currentTry] = {\n        song: selectedSong,\n        skipped: false,\n        isCorrect: isCorrect,\n      };\n\n      return newGuesses;\n    });\n\n    setCurrentTry((currentTry) => currentTry + 1);\n    setSelectedSong(undefined);\n\n    if (isCorrect) {\n      setDidGuess(true);\n      // Update the score in local storage\n      const userScore = JSON.parse(localStorage.getItem(\"userScore\") || \"[]\");\n      userScore.push({\n        solution: todaysSolution,\n        guesses: currentTry + 1,\n      });\n      localStorage.setItem(\"userScore\", JSON.stringify(userScore));\n    }\n\n    event({\n      category: \"Game\",\n      action: \"Guess\",\n      label: `${selectedSong.artist} - ${selectedSong.name}`,\n      value: isCorrect ? 1 : 0,\n    });\n  }, [guesses, selectedSong]);\n\n  return (\n    <main>\n      <Header openInfoPopUp={openInfoPopUp} />\n      {isInfoPopUpOpen && <InfoPopUp onClose={closeInfoPopUp} />}\n      <Styled.Container>\n        {/* Game Stats */}\n        <Styled.GameStats>\n          <p>Games Played: {gamesPlayed}</p>\n          <p>Total Guesses: {totalGuesses}</p>\n        </Styled.GameStats>\n\n        <Router>\n          <Routes>\n            <Route\n              path=\"/\"\n              element={\n                <Game\n                  guesses={guesses}\n                  didGuess={didGuess}\n                  todaysSolution={todaysSolution}\n                  currentTry={currentTry}\n                  setSelectedSong={setSelectedSong}\n                  skip={skip}\n                  guess={guess}\n                />\n              }\n            />\n            <Route path=\"/contact\" element={<ContactPage />} />\n          </Routes>\n        </Router>\n      </Styled.Container>\n      <Footer />\n    </main>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}