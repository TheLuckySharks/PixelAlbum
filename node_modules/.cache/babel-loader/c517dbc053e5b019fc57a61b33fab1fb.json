{"ast":null,"code":"var _jsxFileName = \"/Users/am/Desktop/sluchajfun-main 2 2/RockNew/src/components/Result/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { scoreToEmoji } from \"../../helpers\";\nimport { Button } from \"../Button\";\nimport { YouTube } from \"../YouTube\";\nimport * as Styled from \"./index.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Result(_ref) {\n  _s();\n\n  let {\n    didGuess,\n    todaysSolution,\n    guesses,\n    currentTry\n  } = _ref;\n  const hoursToNextDay = Math.floor((new Date(new Date().setHours(24, 0, 0, 0)).getTime() - new Date().getTime()) / 1000 / 60 / 60);\n  const [isCopied, setIsCopied] = React.useState(false);\n  const textForTry = [\"Rock God!\", \"Guitar Hero\", \"Roadie\", \"Woo!\", \"Phew!\"];\n  const copyResult = React.useCallback(() => {\n    navigator.clipboard.writeText(scoreToEmoji(guesses));\n    setIsCopied(true);\n  }, [guesses]);\n\n  if (didGuess) {\n    const triesConjugation = currentTry === 1 ? \"attempt\" : \"attempts\";\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Styled.ResultTitle, {\n        children: textForTry[currentTry - 1]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.SongTitle, {\n        children: [\"Today's song is \", todaysSolution.artist, \" - \", todaysSolution.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.Tries, {\n        children: [\"You guessed in \", currentTry, \" \", triesConjugation]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n        id: todaysSolution.youtubeId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: copyResult,\n        variant: \"green\",\n        children: \"Copy results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), isCopied && /*#__PURE__*/_jsxDEV(Styled.Text, {\n        children: \"Copied to clipboard!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(Styled.TimeToNext, {\n        children: [\"Encore! New song tomorrow: \", hoursToNextDay, \" hours!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Styled.ResultTitle, {\n        children: \"Better luck next time...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.SongTitle, {\n        children: [\"Today's song is \", todaysSolution.artist, \" - \", todaysSolution.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YouTube, {\n        id: todaysSolution.youtubeId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.TimeToNext, {\n        children: [\"Encore! Try again tomorrow: \", hoursToNextDay, \" hours!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\n\n_s(Result, \"Kd7EKYr2D4AeCwTl8WIgabDR+cM=\");\n\n_c = Result;\n\nvar _c;\n\n$RefreshReg$(_c, \"Result\");","map":{"version":3,"sources":["/Users/am/Desktop/sluchajfun-main 2 2/RockNew/src/components/Result/index.tsx"],"names":["React","scoreToEmoji","Button","YouTube","Styled","Result","didGuess","todaysSolution","guesses","currentTry","hoursToNextDay","Math","floor","Date","setHours","getTime","isCopied","setIsCopied","useState","textForTry","copyResult","useCallback","navigator","clipboard","writeText","triesConjugation","artist","name","youtubeId"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAIA,SAASC,YAAT,QAA6B,eAA7B;AAEA,SAASC,MAAT,QAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;;;AASA,OAAO,SAASC,MAAT,OAKG;AAAA;;AAAA,MALa;AACrBC,IAAAA,QADqB;AAErBC,IAAAA,cAFqB;AAGrBC,IAAAA,OAHqB;AAIrBC,IAAAA;AAJqB,GAKb;AACR,QAAMC,cAAc,GAAGC,IAAI,CAACC,KAAL,CACrB,CAAC,IAAIC,IAAJ,CAAS,IAAIA,IAAJ,GAAWC,QAAX,CAAoB,EAApB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B,CAAT,EAA2CC,OAA3C,KACC,IAAIF,IAAJ,GAAWE,OAAX,EADF,IAEE,IAFF,GAGE,EAHF,GAIE,EALmB,CAAvB;AAOA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BjB,KAAK,CAACkB,QAAN,CAAe,KAAf,CAAhC;AACA,QAAMC,UAAU,GAAG,CAAC,WAAD,EAAc,aAAd,EAA6B,QAA7B,EAAuC,MAAvC,EAA+C,OAA/C,CAAnB;AAEA,QAAMC,UAAU,GAAGpB,KAAK,CAACqB,WAAN,CAAkB,MAAM;AACzCC,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BvB,YAAY,CAACO,OAAD,CAA1C;AACAS,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD,GAHkB,EAGhB,CAACT,OAAD,CAHgB,CAAnB;;AAIA,MAAIF,QAAJ,EAAc;AACZ,UAAMmB,gBAAgB,GAAGhB,UAAU,KAAK,CAAf,GAAmB,SAAnB,GAA+B,UAAxD;AAEA,wBACE;AAAA,8BACE,QAAC,MAAD,CAAQ,WAAR;AAAA,kBAAqBU,UAAU,CAACV,UAAU,GAAG,CAAd;AAA/B;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD,CAAQ,SAAR;AAAA,uCACuBF,cAAc,CAACmB,MADtC,SACiDnB,cAAc,CAACoB,IADhE;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,MAAD,CAAQ,KAAR;AAAA,sCACkBlB,UADlB,OAC+BgB,gBAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAQE,QAAC,OAAD;AAAS,QAAA,EAAE,EAAElB,cAAc,CAACqB;AAA5B;AAAA;AAAA;AAAA;AAAA,cARF,eASE,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAER,UAAjB;AAA6B,QAAA,OAAO,EAAC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cATF,EAYGJ,QAAQ,iBAAI,QAAC,MAAD,CAAQ,IAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAZf,eAaE,QAAC,MAAD,CAAQ,UAAR;AAAA,kDAC8BN,cAD9B;AAAA;AAAA;AAAA;AAAA;AAAA,cAbF;AAAA,oBADF;AAmBD,GAtBD,MAsBO;AACL,wBACE;AAAA,8BACE,QAAC,MAAD,CAAQ,WAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,MAAD,CAAQ,SAAR;AAAA,uCACuBH,cAAc,CAACmB,MADtC,SACiDnB,cAAc,CAACoB,IADhE;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAKE,QAAC,OAAD;AAAS,QAAA,EAAE,EAAEpB,cAAc,CAACqB;AAA5B;AAAA;AAAA;AAAA;AAAA,cALF,eAME,QAAC,MAAD,CAAQ,UAAR;AAAA,mDAC+BlB,cAD/B;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA,oBADF;AAYD;AACF;;GAxDeL,M;;KAAAA,M","sourcesContent":["import React from \"react\";\n\nimport { Song } from \"../../types/song\";\nimport { GuessType } from \"../../types/guess\";\nimport { scoreToEmoji } from \"../../helpers\";\n\nimport { Button } from \"../Button\";\nimport { YouTube } from \"../YouTube\";\n\nimport * as Styled from \"./index.styled\";\n\ninterface Props {\n  didGuess: boolean;\n  currentTry: number;\n  todaysSolution: Song;\n  guesses: GuessType[];\n}\n\nexport function Result({\n  didGuess,\n  todaysSolution,\n  guesses,\n  currentTry,\n}: Props) {\n  const hoursToNextDay = Math.floor(\n    (new Date(new Date().setHours(24, 0, 0, 0)).getTime() -\n      new Date().getTime()) /\n      1000 /\n      60 /\n      60\n  );\n  const [isCopied, setIsCopied] = React.useState(false);\n  const textForTry = [\"Rock God!\", \"Guitar Hero\", \"Roadie\", \"Woo!\", \"Phew!\"];\n\n  const copyResult = React.useCallback(() => {\n    navigator.clipboard.writeText(scoreToEmoji(guesses));\n    setIsCopied(true);\n  }, [guesses]);\n  if (didGuess) {\n    const triesConjugation = currentTry === 1 ? \"attempt\" : \"attempts\";\n\n    return (\n      <>\n        <Styled.ResultTitle>{textForTry[currentTry - 1]}</Styled.ResultTitle>\n        <Styled.SongTitle>\n          Today&#39;s song is {todaysSolution.artist} - {todaysSolution.name}\n        </Styled.SongTitle>\n        <Styled.Tries>\n          You guessed in {currentTry} {triesConjugation}\n        </Styled.Tries>\n        <YouTube id={todaysSolution.youtubeId} />\n        <Button onClick={copyResult} variant=\"green\">\n          Copy results\n        </Button>\n        {isCopied && <Styled.Text>Copied to clipboard!</Styled.Text>}\n        <Styled.TimeToNext>\n          Encore! New song tomorrow: {hoursToNextDay} hours!\n        </Styled.TimeToNext>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <Styled.ResultTitle>Better luck next time...</Styled.ResultTitle>\n        <Styled.SongTitle>\n          Today&#39;s song is {todaysSolution.artist} - {todaysSolution.name}\n        </Styled.SongTitle>\n        <YouTube id={todaysSolution.youtubeId} />\n        <Styled.TimeToNext>\n          Encore! Try again tomorrow: {hoursToNextDay} hours!\n        </Styled.TimeToNext>\n      </>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}