{"ast":null,"code":"export function scoreToEmoji(guesses) {\n  const emojis = {\n    incorrect: \"🟥\",\n    correct: \"🟩\",\n    skip: \"⬜\",\n    empty: \"⬛️\"\n  };\n  const todaysDate = new Date();\n  const prefix = `RockHeardle.com - ${todaysDate.toLocaleDateString()} 🎧`;\n  let scoreEmoji = \"\";\n  guesses.forEach(guess => {\n    if (guess.isCorrect === true) {\n      scoreEmoji += emojis.correct;\n    } else if (guess.skipped === true) {\n      scoreEmoji += emojis.skip;\n    } else if (guess.isCorrect === false) {\n      scoreEmoji += emojis.incorrect;\n    } else {\n      scoreEmoji += emojis.empty;\n    }\n  });\n  return `${prefix} ${scoreEmoji}`;\n}","map":{"version":3,"sources":["/Users/am/Desktop/sluchajfun-main 2 2/RockNew/src/helpers/scoreToEmoji.ts"],"names":["scoreToEmoji","guesses","emojis","incorrect","correct","skip","empty","todaysDate","Date","prefix","toLocaleDateString","scoreEmoji","forEach","guess","isCorrect","skipped"],"mappings":"AAEA,OAAO,SAASA,YAAT,CAAsBC,OAAtB,EAAoD;AACzD,QAAMC,MAAM,GAAG;AACbC,IAAAA,SAAS,EAAE,IADE;AAEbC,IAAAA,OAAO,EAAE,IAFI;AAGbC,IAAAA,IAAI,EAAE,GAHO;AAIbC,IAAAA,KAAK,EAAE;AAJM,GAAf;AAMA,QAAMC,UAAU,GAAG,IAAIC,IAAJ,EAAnB;AACA,QAAMC,MAAM,GAAI,qBAAoBF,UAAU,CAACG,kBAAX,EAAgC,KAApE;AAEA,MAAIC,UAAU,GAAG,EAAjB;AAEAV,EAAAA,OAAO,CAACW,OAAR,CAAiBC,KAAD,IAAsB;AACpC,QAAIA,KAAK,CAACC,SAAN,KAAoB,IAAxB,EAA8B;AAC5BH,MAAAA,UAAU,IAAIT,MAAM,CAACE,OAArB;AACD,KAFD,MAEO,IAAIS,KAAK,CAACE,OAAN,KAAkB,IAAtB,EAA4B;AACjCJ,MAAAA,UAAU,IAAIT,MAAM,CAACG,IAArB;AACD,KAFM,MAEA,IAAIQ,KAAK,CAACC,SAAN,KAAoB,KAAxB,EAA+B;AACpCH,MAAAA,UAAU,IAAIT,MAAM,CAACC,SAArB;AACD,KAFM,MAEA;AACLQ,MAAAA,UAAU,IAAIT,MAAM,CAACI,KAArB;AACD;AACF,GAVD;AAYA,SAAQ,GAAEG,MAAO,IAAGE,UAAW,EAA/B;AACD","sourcesContent":["import { GuessType } from \"../types/guess\";\n\nexport function scoreToEmoji(guesses: GuessType[]): string {\n  const emojis = {\n    incorrect: \"🟥\",\n    correct: \"🟩\",\n    skip: \"⬜\",\n    empty: \"⬛️\",\n  };\n  const todaysDate = new Date();\n  const prefix = `RockHeardle.com - ${todaysDate.toLocaleDateString()} 🎧`;\n\n  let scoreEmoji = \"\";\n\n  guesses.forEach((guess: GuessType) => {\n    if (guess.isCorrect === true) {\n      scoreEmoji += emojis.correct;\n    } else if (guess.skipped === true) {\n      scoreEmoji += emojis.skip;\n    } else if (guess.isCorrect === false) {\n      scoreEmoji += emojis.incorrect;\n    } else {\n      scoreEmoji += emojis.empty;\n    }\n  });\n\n  return `${prefix} ${scoreEmoji}`;\n}\n"]},"metadata":{},"sourceType":"module"}