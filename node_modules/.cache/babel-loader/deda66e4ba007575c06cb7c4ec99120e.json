{"ast":null,"code":"var _jsxFileName = \"/Users/am/Desktop/PixelAlbum/PixelAlbum/src/components/Game/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Button, Guess, Search, Result } from \"../\";\nimport * as Styled from \"./index.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function Game(_ref) {\n  _s();\n\n  let {\n    guesses,\n    todaysSolution,\n    currentTry,\n    didGuess,\n    setSelectedSong,\n    skip,\n    guess\n  } = _ref;\n  const [skippedPictures, setSkippedPictures] = useState([]);\n  const remainingGuesses = 4 - currentTry;\n  useEffect(() => {\n    if (!didGuess && currentTry > 0 && !guesses[currentTry - 1].isCorrect) {\n      const nextSkippedPictureIndex = (currentTry - 1) % 4;\n      const nextSkippedPicture = todaysSolution.skippedPictures[nextSkippedPictureIndex];\n      setSkippedPictures(prevSkippedPictures => [...prevSkippedPictures, nextSkippedPicture]);\n    }\n  }, [currentTry, didGuess, guesses, todaysSolution.skippedPictures]);\n\n  const handleSkip = () => {\n    const nextSkippedPictureIndex = currentTry % 4;\n    const nextSkippedPicture = todaysSolution.skippedPictures[nextSkippedPictureIndex];\n    setSkippedPictures(prevSkippedPictures => [...prevSkippedPictures, nextSkippedPicture]);\n    skip();\n  };\n\n  if (didGuess || currentTry === 4) {\n    return /*#__PURE__*/_jsxDEV(Result, {\n      didGuess: didGuess,\n      currentTry: currentTry,\n      todaysSolution: todaysSolution,\n      guesses: guesses\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Styled.Container, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: skippedPictures.length > 0 ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: skippedPictures[skippedPictures.length - 1],\n          alt: \"Skipped Album Cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n          src: todaysSolution.coverUrl,\n          alt: \"Album Cover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Styled.GuessContainer, {\n        children: guesses.slice(0, 4).map((guess, index) => /*#__PURE__*/_jsxDEV(Guess, {\n          guess: guess,\n          isCorrect: guess.isCorrect,\n          active: index === currentTry\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Search, {\n        currentTry: currentTry,\n        setSelectedSong: setSelectedSong\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Styled.Buttons, {\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        onClick: handleSkip,\n        children: remainingGuesses === 1 ? \"Give Up?\" : `Skip`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"green\",\n        onClick: guess,\n        children: \"Guess\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Game, \"Az9L7jraa/go/YeXN3pvPYownUs=\");\n\n_c = Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["/Users/am/Desktop/PixelAlbum/PixelAlbum/src/components/Game/index.tsx"],"names":["React","useState","useEffect","Button","Guess","Search","Result","Styled","Game","guesses","todaysSolution","currentTry","didGuess","setSelectedSong","skip","guess","skippedPictures","setSkippedPictures","remainingGuesses","isCorrect","nextSkippedPictureIndex","nextSkippedPicture","prevSkippedPictures","handleSkip","length","coverUrl","slice","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { GuessType } from \"../../types/guess\";\nimport { Song } from \"../../types/song\";\nimport { Button, Guess, Search, Result } from \"../\";\nimport * as Styled from \"./index.styled\";\n\ninterface Props {\n  guesses: GuessType[];\n  todaysSolution: Song;\n  currentTry: number;\n  didGuess: boolean;\n  setSelectedSong: React.Dispatch<React.SetStateAction<Song | undefined>>;\n  skip: () => void;\n  guess: () => void;\n}\n\nexport function Game({\n  guesses,\n  todaysSolution,\n  currentTry,\n  didGuess,\n  setSelectedSong,\n  skip,\n  guess,\n}: Props) {\n  const [skippedPictures, setSkippedPictures] = useState<string[]>([]);\n  const remainingGuesses = 4 - currentTry;\n\n  useEffect(() => {\n    if (!didGuess && currentTry > 0 && !guesses[currentTry - 1].isCorrect) {\n      const nextSkippedPictureIndex = (currentTry - 1) % 4;\n      const nextSkippedPicture =\n        todaysSolution.skippedPictures[nextSkippedPictureIndex];\n      setSkippedPictures((prevSkippedPictures) => [\n        ...prevSkippedPictures,\n        nextSkippedPicture,\n      ]);\n    }\n  }, [currentTry, didGuess, guesses, todaysSolution.skippedPictures]);\n\n  const handleSkip = () => {\n    const nextSkippedPictureIndex = currentTry % 4;\n    const nextSkippedPicture =\n      todaysSolution.skippedPictures[nextSkippedPictureIndex];\n    setSkippedPictures((prevSkippedPictures) => [\n      ...prevSkippedPictures,\n      nextSkippedPicture,\n    ]);\n    skip();\n  };\n\n  if (didGuess || currentTry === 4) {\n    return (\n      <Result\n        didGuess={didGuess}\n        currentTry={currentTry}\n        todaysSolution={todaysSolution}\n        guesses={guesses}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Styled.Container>\n        <div>\n          {skippedPictures.length > 0 ? (\n            <img\n              src={skippedPictures[skippedPictures.length - 1]}\n              alt=\"Skipped Album Cover\"\n            />\n          ) : (\n            <img src={todaysSolution.coverUrl} alt=\"Album Cover\" />\n          )}\n        </div>\n        <Styled.GuessContainer>\n          {guesses.slice(0, 4).map((guess: GuessType, index) => (\n            <Guess\n              key={index}\n              guess={guess}\n              isCorrect={guess.isCorrect}\n              active={index === currentTry}\n            />\n          ))}\n        </Styled.GuessContainer>\n\n        <Search currentTry={currentTry} setSelectedSong={setSelectedSong} />\n      </Styled.Container>\n\n      <Styled.Buttons>\n        <Button onClick={handleSkip}>\n          {remainingGuesses === 1 ? \"Give Up?\" : `Skip`}\n        </Button>\n        <Button variant=\"green\" onClick={guess}>\n          Guess\n        </Button>\n      </Styled.Buttons>\n    </>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}