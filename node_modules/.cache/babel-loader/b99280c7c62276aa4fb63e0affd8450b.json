{"ast":null,"code":"var _jsxFileName = \"/Users/am/Desktop/PixelAlbum/PixelAlbum/src/components/Guess/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport * as Styled from \"./index.styled\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Guess(_ref) {\n  _s();\n\n  let {\n    guess,\n    isCorrect,\n    active\n  } = _ref;\n  const {\n    song,\n    skipped\n  } = guess;\n  React.useEffect(() => {\n    if (song) {// Logic for handling correct guesses\n    } else if (skipped) {// Logic for handling skipped guesses\n    }\n  }, [guess]);\n  return /*#__PURE__*/_jsxDEV(Styled.Container, {\n    active: active,\n    isCorrect: isCorrect,\n    skipped: skipped\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Guess, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Guess;\n\nvar _c;\n\n$RefreshReg$(_c, \"Guess\");","map":{"version":3,"sources":["/Users/am/Desktop/PixelAlbum/PixelAlbum/src/components/Guess/index.tsx"],"names":["React","Styled","Guess","guess","isCorrect","active","song","skipped","useEffect"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,gBAAxB;;AAQA,OAAO,SAASC,KAAT,OAAoD;AAAA;;AAAA,MAArC;AAAEC,IAAAA,KAAF;AAASC,IAAAA,SAAT;AAAoBC,IAAAA;AAApB,GAAqC;AACzD,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBJ,KAA1B;AAEAH,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACpB,QAAIF,IAAJ,EAAU,CACR;AACD,KAFD,MAEO,IAAIC,OAAJ,EAAa,CAClB;AACD;AACF,GAND,EAMG,CAACJ,KAAD,CANH;AAQA,sBACE,QAAC,MAAD,CAAQ,SAAR;AAAkB,IAAA,MAAM,EAAEE,MAA1B;AAAkC,IAAA,SAAS,EAAED,SAA7C;AAAwD,IAAA,OAAO,EAAEG;AAAjE;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;GAhBeL,K;;KAAAA,K","sourcesContent":["import React from \"react\";\nimport { GuessType } from \"../../types/guess\";\nimport * as Styled from \"./index.styled\";\n\ninterface Props {\n  guess: GuessType;\n  isCorrect: boolean | undefined;\n  active: boolean;\n}\n\nexport function Guess({ guess, isCorrect, active }: Props) {\n  const { song, skipped } = guess;\n\n  React.useEffect(() => {\n    if (song) {\n      // Logic for handling correct guesses\n    } else if (skipped) {\n      // Logic for handling skipped guesses\n    }\n  }, [guess]);\n\n  return (\n    <Styled.Container active={active} isCorrect={isCorrect} skipped={skipped}>\n      {/* No text to be displayed in the guess box */}\n    </Styled.Container>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}